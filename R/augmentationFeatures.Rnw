<<scf-augFeat_plot, eval=TRUE, echo=FALSE, message=FALSE, fig.width=12, fig.height=16, out.width=".8\\linewidth", fig.align="center", fig.cap="Two examples of coorinate augmentation functions aiming at producing useful information from coordinates of cellular objects. The first image shows the discretized elliptic distance (5 bins of equal area) from individual image centers which could be relevant because of deteriorating optical properties of microscope lenses, while the second diagram visualized the 2-dimensional density of cellular objects, an important population context feature. Data is taken from well H6 of plate J107-2C.", fig.scap="Examples of coordinate augmentation functions as implemented in singleCellFeatures.">>=
suppressPackageStartupMessages(library(singleCellFeatures))
suppressPackageStartupMessages(library(ggplot2))

# source: http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_
#         (ggplot2)/
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot
# objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

data <- WellData(WellLocation("J107-2C", "H", 6))
data <- augmentImageLocation(data)
data <- augmentCordinateFeatures(data, 5, c(14, 10), TRUE, TRUE)
molten <- meltData(data)$mat$Cells

vlines <- data.frame(c(0, 1397, 2799, 4196))
hlines <- data.frame(c(0, 1045, 2095, 3140))
names(vlines) <- "border"
names(hlines) <- "border"

theme <- readRDS(paste0(gsub("/R", "/data", getwd()), "/ggplot-theme.rds"))
theme_set(theme)

p1 <- ggplot(molten, aes(x=Cells.Location_Shifted_X,
                         y=Cells.Location_Shifted_Y)) +
  geom_point(aes(colour=factor(Cells.Location_In_Ellipse_Image)), size=3) +
  scale_colour_brewer(name="Ellipse membership   ", palette="YlGnBu") +
  theme(legend.position="bottom", axis.title=element_blank(),
        axis.text=element_blank(), axis.ticks=element_blank(),
        line=element_blank(),
        legend.title=element_text(size=20),
        legend.text=element_text(size=20)) +
  geom_vline(data=vlines, aes(xintercept=border)) +
  geom_hline(data=hlines, aes(yintercept=border)) +
  scale_x_continuous(limits=range(vlines), expand = c(0, 0)) +
  scale_y_continuous(limits=range(hlines), expand = c(0, 0))
breaks <- c(3e-7, 6e-7, 9e-7)
p2 <- ggplot(molten, aes(x=Cells.Location_Shifted_X,
                         y=Cells.Location_Shifted_Y)) +
  geom_point(aes(colour=Cells.Location_Kern_Dens_Image), size=3) +
  scale_colour_gradientn(colours=brewer.pal(9, "YlGnBu"),
    guide=guide_colourbar(title="2-dimensional kernel density estimate   ", barwidth=15, barheight=1.5), breaks=breaks, labels=format(breaks)) +
  theme(legend.position="bottom", axis.title=element_blank(),
        axis.text=element_blank(), axis.ticks=element_blank(),
        line=element_blank(),
        legend.title=element_text(size=20),
        legend.text=element_text(size=20)) +
  geom_vline(data=vlines, aes(xintercept=border)) +
  geom_hline(data=hlines, aes(yintercept=border)) +
  scale_x_continuous(limits=range(vlines), expand = c(0, 0)) +
  scale_y_continuous(limits=range(hlines), expand = c(0, 0))

multiplot(p1, p2)
@