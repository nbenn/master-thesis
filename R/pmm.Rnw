<<hooks, echo=FALSE>>=
knit_hooks$set(crop=hook_pdfcrop)
@

<<pmm-heatmap, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, fig.width=12, fig.height=8, out.width=".95\\linewidth", crop=TRUE, fig.align="center", fig.cap="A heatmap plot as produced by the Bioconductor package \\acrshort{pmm}, which displays all genes that were determined to be significant hits (FDR < 0.4; indicated by black borders) for at least one pathogen. Genes are ordered by average c\\textunderscript{pg} values and both extrema are marked with white dots, while the sharedness score is shown as a scatterplot below. All available kinome screens were taken into consideration.", fig.scap="Heatmap plot showing significant genes for InfectX kinome screens as determined by \\acrshort{pmm}.">>=
suppressPackageStartupMessages(library(pmm))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(gtable))
suppressPackageStartupMessages(library(gridExtra))

data(kinome)
thresh  <- 0.4
pmm.fit <- pmm(kinome, "InfectionIndex", gene.col="GeneName",
            condition.col="condition")
pmm.sh  <- sharedness(pmm.fit, threshold=thresh)

pmm.fdr <- pmm.fit[,grep("^fdr.", names(pmm.fit))]
dims    <- dim(pmm.fdr)
nme     <- names(pmm.fdr)
pmm.fdr <- as.numeric(pmm.fdr < thresh)
dim(pmm.fdr) <- dims
keep    <- which(rowSums(pmm.fdr, na.rm=TRUE) >= 1)
pmm.fdr <- as.data.frame(pmm.fdr)
names(pmm.fdr) <- nme
pmm.fdr <- cbind(pmm.fit$GeneID, pmm.fdr)
pmm.fdr <- pmm.fdr[keep,]
names(pmm.fdr) <- sapply(names(pmm.fdr), function(x) {
  res <- unlist(strsplit(x, "[.]"))[2]
  if(res == "SALMONELLA") return("Styphimurium")
  else if (x == "pmm.fit$GeneID") return("GeneID")
  else return(res)
})

pmm.ccg <- pmm.fit[,grep("^ccg.", names(pmm.fit))]
pmm.ccg <- cbind(pmm.ccg, rowMeans(pmm.ccg))
pmm.ccg <- cbind(pmm.fit$GeneID, pmm.ccg)
pmm.ccg <- pmm.ccg[keep,]
neworder <- order(pmm.ccg[ncol(pmm.ccg)])
pmm.ccg <- pmm.ccg[neworder, ]
pmm.fdr <- pmm.fdr[neworder, ]
pmm.ccg <- pmm.ccg[,-length(pmm.ccg)]
names(pmm.ccg) <- sapply(names(pmm.ccg), function(x) {
  res <- unlist(strsplit(x, "[.]"))[2]
  if(res == "SALMONELLA") return("Styphimurium")
  else if (x == "pmm.fit$GeneID") return("GeneID")
  else return(res)
})
pmm.ext <- apply(pmm.ccg[,-1], 2, function(col) {
  res <- rep(0, length(col))
  res[which(col == min(col))] <- 1
  res[which(col == max(col))] <- 1
  return(res)
})
pmm.ext <- as.data.frame(pmm.ext)
pmm.ext$GeneID <- pmm.ccg$GeneID

pmm.ccg <- pmm.ccg[,order(colnames(pmm.ccg))]
pmm.fdr <- pmm.fdr[,order(colnames(pmm.fdr))]
pmm.ext <- pmm.ext[,order(colnames(pmm.ext))]

pmm.ccg <- melt(pmm.ccg)
pmm.fdr <- melt(pmm.fdr)
pmm.ext <- melt(pmm.ext)
data <- cbind(pmm.ccg, pmm.fdr$value)
data <- cbind(data, pmm.ext$value)
names(data) <- c("Gene", "Pathogen", "ccg", "fdr", "ext")
data$Gene <- factor(data$Gene, levels=unique(data$Gene), ordered=TRUE)
data$Pathogen <- factor(data$Pathogen, levels=rev(unique(data$Pathogen)),
                        ordered=TRUE)

myPalette <- colorRampPalette(brewer.pal(11, "RdBu")[2:10], space="Lab")

myLabels  <- rev(sapply(unique(data$Pathogen), function(x) {
  if(x == "ADENO") return("Adenovirus")
  else if (x == "BARTONELLA") return(expression(paste(italic("B. henslae"))))
  else if (x == "BRUCELLA") return(expression(paste(italic("B. abortus"))))
  else if (x == "LISTERIA")
    return(expression(paste(italic("L. monocytogenes"))))
  else if (x == "RHINO") return("Rhinovirus")
  else if (x == "SHIGELLA") return(expression(paste(italic("S. flexneri"))))
  else if (x == "Styphimurium")
    return(expression(paste(italic("S"), ". typhimurium")))
  else if (x == "VACCINIA") return("Vaccinia virus")
  else return(x)
}))

fdrFrames <- data
fdrFrames$Gene <- as.integer(fdrFrames$Gene)
fdrFrames$Pathogen <- as.integer(fdrFrames$Pathogen)
fdrFrames$color <- ifelse(fdrFrames$fdr == 1, "black", NA)

extPoint <- data
extPoint$Gene <- as.integer(extPoint$Gene)
extPoint$Pathogen <- as.integer(extPoint$Pathogen)
extPoint$size <- ifelse(extPoint$ext == 1, "dot", "no_dot")

plot <- ggplot(data=data) +
  geom_tile(aes(x=Gene, y=Pathogen, fill=ccg)) +
  scale_y_discrete(name="", labels=myLabels) +
  scale_x_discrete(name="") +
  theme_bw() +
  theme(axis.ticks=element_blank(),
        axis.text.x = element_text(angle=60, vjust=0, hjust=0),
        text=element_text(size=18),
        legend.position="bottom",
        panel.border=element_blank(),
        panel.grid=element_blank(),
        legend.key.width=unit(1.5, "cm"),
        legend.key.height=unit(0.75, "cm")) +
  scale_fill_gradientn(colours=myPalette(100),
                       name=expression(
    paste("Estimated effect ", c[pg], " for gene g and pathogen p  "))) +
  geom_rect(data=fdrFrames, size=0.5, fill=NA, colour=fdrFrames$color,
                aes(xmin=Gene - 0.5, xmax=Gene + 0.5,
                    ymin=Pathogen - 0.5, ymax=Pathogen + 0.5)) +
  geom_point(data=extPoint, aes(x=Gene, y=Pathogen, size=size,
                                colour=size)) +
  scale_size_manual(values=c(dot=3, no_dot=NA), guide="none") +
  scale_colour_manual(values=c(dot="white", no_dot=NA), guide="none") +
  coord_fixed()

g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}

mylegend<-g_legend(plot)
plot <- plot + theme(legend.position="none")

# Get the gtable
gt <- ggplotGrob(plot)

# Get the position of the panel in the layout
panel <-c(subset(gt$layout, name=="panel", se=t:r))

# Get the row number of the bottom axis in the layout
rn <- which(gt$layout$name == "axis-b")

# Extract the axis (tick marks and axis text from the gtable)
axis.grob <- gt$grobs[[rn]]
axisb <- axis.grob$children[[2]]  # Two children - get the second

# Reverse the grobs and the heights
axisb$heights <- rev(axisb$heights)
axisb$grobs <- rev(axisb$grobs)
#axisb$grobs[[2]]$y <- axisb$grobs[[2]]$y - unit(1, "npc") + unit(0.15, "cm")

# Add a new row to gt, and add the revised axisb grob to the new row.
gt <- gtable_add_rows(gt, gt$heights[gt$layout[rn, ]$l], panel$t-1)
gt <- gtable_add_grob(gt, axisb, l = panel$l, t = panel$t, r = panel$r)

# Remove the row containing the bottom axis
gt <- gt[-(panel$b+2),]

sh.data <- pmm.sh[neworder,]
sh.data$GeneID <- factor(sh.data$GeneID, levels=unique(sh.data$GeneID),
                         ordered=TRUE)
shared <- ggplot(data=sh.data, aes(x=GeneID, y=Sharedness)) +
  geom_point(size=2) +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        plot.margin=unit(c(-2, 0.5, 0, 3.8), units="cm"),
        axis.title.y=element_text(size=14, vjust=2),
        axis.text.y=element_text(size=12),
        panel.border=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

grid.arrange(arrangeGrob(gt, shared, ncol=1, heights=c(6, 1)),
             mylegend, nrow=2,heights=c(10, 1))

@


